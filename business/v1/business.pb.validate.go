// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/business/v1/business.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReplyReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyReviewReqMultiError,
// or nil if none found.
func (m *ReplyReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := ReplyReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := ReplyReviewReqValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 255 {
		err := ReplyReviewReqValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return ReplyReviewReqMultiError(errors)
	}

	return nil
}

// ReplyReviewReqMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewReq.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewReqMultiError) AllErrors() []error { return m }

// ReplyReviewReqValidationError is the validation error returned by
// ReplyReviewReq.Validate if the designated constraints aren't met.
type ReplyReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewReqValidationError) ErrorName() string { return "ReplyReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewReqValidationError{}

// Validate checks the field values on ReplyReviewRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyReviewRspMultiError,
// or nil if none found.
func (m *ReplyReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReplyID

	if len(errors) > 0 {
		return ReplyReviewRspMultiError(errors)
	}

	return nil
}

// ReplyReviewRspMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewRspMultiError) AllErrors() []error { return m }

// ReplyReviewRspValidationError is the validation error returned by
// ReplyReviewRsp.Validate if the designated constraints aren't met.
type ReplyReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewRspValidationError) ErrorName() string { return "ReplyReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewRspValidationError{}

// Validate checks the field values on AppealReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewReqMultiError, or nil if none found.
func (m *AppealReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := AppealReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := AppealReviewReqValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 2 || l > 200 {
		err := AppealReviewReqValidationError{
			field:  "Reason",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 200 {
		err := AppealReviewReqValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return AppealReviewReqMultiError(errors)
	}

	return nil
}

// AppealReviewReqMultiError is an error wrapping multiple validation errors
// returned by AppealReviewReq.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewReqMultiError) AllErrors() []error { return m }

// AppealReviewReqValidationError is the validation error returned by
// AppealReviewReq.Validate if the designated constraints aren't met.
type AppealReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewReqValidationError) ErrorName() string { return "AppealReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e AppealReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewReqValidationError{}

// Validate checks the field values on AppealReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewRspMultiError, or nil if none found.
func (m *AppealReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppealID

	if len(errors) > 0 {
		return AppealReviewRspMultiError(errors)
	}

	return nil
}

// AppealReviewRspMultiError is an error wrapping multiple validation errors
// returned by AppealReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewRspMultiError) AllErrors() []error { return m }

// AppealReviewRspValidationError is the validation error returned by
// AppealReviewRsp.Validate if the designated constraints aren't met.
type AppealReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewRspValidationError) ErrorName() string { return "AppealReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e AppealReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewRspValidationError{}
