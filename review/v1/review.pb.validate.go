// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/review/v1/review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewReqMultiError, or nil if none found.
func (m *CreateReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreateReviewReqValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderID() <= 0 {
		err := CreateReviewReqValidationError{
			field:  "OrderID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := CreateReviewReqValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewReq_Score_InLookup[m.GetScore()]; !ok {
		err := CreateReviewReqValidationError{
			field:  "Score",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewReq_ServiceScore_InLookup[m.GetServiceScore()]; !ok {
		err := CreateReviewReqValidationError{
			field:  "ServiceScore",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateReviewReq_ExpressScore_InLookup[m.GetExpressScore()]; !ok {
		err := CreateReviewReqValidationError{
			field:  "ExpressScore",
			reason: "value must be in list [0 1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 8 || l > 255 {
		err := CreateReviewReqValidationError{
			field:  "Content",
			reason: "value length must be between 8 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	// no validation rules for Anonymous

	if len(errors) > 0 {
		return CreateReviewReqMultiError(errors)
	}

	return nil
}

// CreateReviewReqMultiError is an error wrapping multiple validation errors
// returned by CreateReviewReq.ValidateAll() if the designated constraints
// aren't met.
type CreateReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewReqMultiError) AllErrors() []error { return m }

// CreateReviewReqValidationError is the validation error returned by
// CreateReviewReq.Validate if the designated constraints aren't met.
type CreateReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewReqValidationError) ErrorName() string { return "CreateReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewReqValidationError{}

var _CreateReviewReq_Score_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

var _CreateReviewReq_ServiceScore_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

var _CreateReviewReq_ExpressScore_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on CreateReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewRspMultiError, or nil if none found.
func (m *CreateReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewID

	if len(errors) > 0 {
		return CreateReviewRspMultiError(errors)
	}

	return nil
}

// CreateReviewRspMultiError is an error wrapping multiple validation errors
// returned by CreateReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewRspMultiError) AllErrors() []error { return m }

// CreateReviewRspValidationError is the validation error returned by
// CreateReviewRsp.Validate if the designated constraints aren't met.
type CreateReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewRspValidationError) ErrorName() string { return "CreateReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewRspValidationError{}

// Validate checks the field values on ReplyReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyReviewReqMultiError,
// or nil if none found.
func (m *ReplyReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := ReplyReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := ReplyReviewReqValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 255 {
		err := ReplyReviewReqValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return ReplyReviewReqMultiError(errors)
	}

	return nil
}

// ReplyReviewReqMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewReq.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewReqMultiError) AllErrors() []error { return m }

// ReplyReviewReqValidationError is the validation error returned by
// ReplyReviewReq.Validate if the designated constraints aren't met.
type ReplyReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewReqValidationError) ErrorName() string { return "ReplyReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewReqValidationError{}

// Validate checks the field values on ReplyReviewRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyReviewRspMultiError,
// or nil if none found.
func (m *ReplyReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReplyID

	if len(errors) > 0 {
		return ReplyReviewRspMultiError(errors)
	}

	return nil
}

// ReplyReviewRspMultiError is an error wrapping multiple validation errors
// returned by ReplyReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type ReplyReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyReviewRspMultiError) AllErrors() []error { return m }

// ReplyReviewRspValidationError is the validation error returned by
// ReplyReviewRsp.Validate if the designated constraints aren't met.
type ReplyReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyReviewRspValidationError) ErrorName() string { return "ReplyReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e ReplyReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyReviewRspValidationError{}

// Validate checks the field values on GetReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetReviewReqMultiError, or
// nil if none found.
func (m *GetReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := GetReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReviewReqMultiError(errors)
	}

	return nil
}

// GetReviewReqMultiError is an error wrapping multiple validation errors
// returned by GetReviewReq.ValidateAll() if the designated constraints aren't met.
type GetReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewReqMultiError) AllErrors() []error { return m }

// GetReviewReqValidationError is the validation error returned by
// GetReviewReq.Validate if the designated constraints aren't met.
type GetReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewReqValidationError) ErrorName() string { return "GetReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e GetReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewReqValidationError{}

// Validate checks the field values on GetReviewRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetReviewRspMultiError, or
// nil if none found.
func (m *GetReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReviewRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReviewRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReviewRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReviewRspMultiError(errors)
	}

	return nil
}

// GetReviewRspMultiError is an error wrapping multiple validation errors
// returned by GetReviewRsp.ValidateAll() if the designated constraints aren't met.
type GetReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewRspMultiError) AllErrors() []error { return m }

// GetReviewRspValidationError is the validation error returned by
// GetReviewRsp.Validate if the designated constraints aren't met.
type GetReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewRspValidationError) ErrorName() string { return "GetReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e GetReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewRspValidationError{}

// Validate checks the field values on ReviewInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewInfoMultiError, or
// nil if none found.
func (m *ReviewInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewID

	// no validation rules for UserID

	// no validation rules for OrderID

	// no validation rules for Score

	// no validation rules for ServiceScore

	// no validation rules for ExpressScore

	// no validation rules for Content

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	// no validation rules for Status

	if len(errors) > 0 {
		return ReviewInfoMultiError(errors)
	}

	return nil
}

// ReviewInfoMultiError is an error wrapping multiple validation errors
// returned by ReviewInfo.ValidateAll() if the designated constraints aren't met.
type ReviewInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewInfoMultiError) AllErrors() []error { return m }

// ReviewInfoValidationError is the validation error returned by
// ReviewInfo.Validate if the designated constraints aren't met.
type ReviewInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewInfoValidationError) ErrorName() string { return "ReviewInfoValidationError" }

// Error satisfies the builtin error interface
func (e ReviewInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewInfoValidationError{}

// Validate checks the field values on AuditReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditReviewReqMultiError,
// or nil if none found.
func (m *AuditReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := AuditReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() <= 0 {
		err := AuditReviewReqValidationError{
			field:  "Status",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpUser()) < 2 {
		err := AuditReviewReqValidationError{
			field:  "OpUser",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpReason()) < 2 {
		err := AuditReviewReqValidationError{
			field:  "OpReason",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OpRemarks != nil {
		// no validation rules for OpRemarks
	}

	if len(errors) > 0 {
		return AuditReviewReqMultiError(errors)
	}

	return nil
}

// AuditReviewReqMultiError is an error wrapping multiple validation errors
// returned by AuditReviewReq.ValidateAll() if the designated constraints
// aren't met.
type AuditReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditReviewReqMultiError) AllErrors() []error { return m }

// AuditReviewReqValidationError is the validation error returned by
// AuditReviewReq.Validate if the designated constraints aren't met.
type AuditReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditReviewReqValidationError) ErrorName() string { return "AuditReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditReviewReqValidationError{}

// Validate checks the field values on AuditReviewRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditReviewRspMultiError,
// or nil if none found.
func (m *AuditReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditReviewRspMultiError(errors)
	}

	return nil
}

// AuditReviewRspMultiError is an error wrapping multiple validation errors
// returned by AuditReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type AuditReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditReviewRspMultiError) AllErrors() []error { return m }

// AuditReviewRspValidationError is the validation error returned by
// AuditReviewRsp.Validate if the designated constraints aren't met.
type AuditReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditReviewRspValidationError) ErrorName() string { return "AuditReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e AuditReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditReviewRspValidationError{}

// Validate checks the field values on AppealReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewReqMultiError, or nil if none found.
func (m *AppealReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := AppealReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreID() <= 0 {
		err := AppealReviewReqValidationError{
			field:  "StoreID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 2 || l > 200 {
		err := AppealReviewReqValidationError{
			field:  "Reason",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 200 {
		err := AppealReviewReqValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PicInfo

	// no validation rules for VideoInfo

	if len(errors) > 0 {
		return AppealReviewReqMultiError(errors)
	}

	return nil
}

// AppealReviewReqMultiError is an error wrapping multiple validation errors
// returned by AppealReviewReq.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewReqMultiError) AllErrors() []error { return m }

// AppealReviewReqValidationError is the validation error returned by
// AppealReviewReq.Validate if the designated constraints aren't met.
type AppealReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewReqValidationError) ErrorName() string { return "AppealReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e AppealReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewReqValidationError{}

// Validate checks the field values on AppealReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppealReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppealReviewRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppealReviewRspMultiError, or nil if none found.
func (m *AppealReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppealReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppealID

	if len(errors) > 0 {
		return AppealReviewRspMultiError(errors)
	}

	return nil
}

// AppealReviewRspMultiError is an error wrapping multiple validation errors
// returned by AppealReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type AppealReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppealReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppealReviewRspMultiError) AllErrors() []error { return m }

// AppealReviewRspValidationError is the validation error returned by
// AppealReviewRsp.Validate if the designated constraints aren't met.
type AppealReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppealReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppealReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppealReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppealReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppealReviewRspValidationError) ErrorName() string { return "AppealReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e AppealReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppealReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppealReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppealReviewRspValidationError{}

// Validate checks the field values on AuditAppealReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditAppealReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditAppealReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditAppealReqMultiError,
// or nil if none found.
func (m *AuditAppealReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditAppealReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppealID() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "AppealID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReviewID() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "Status",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpUser()) < 2 {
		err := AuditAppealReqValidationError{
			field:  "OpUser",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OpRemarks != nil {
		// no validation rules for OpRemarks
	}

	if len(errors) > 0 {
		return AuditAppealReqMultiError(errors)
	}

	return nil
}

// AuditAppealReqMultiError is an error wrapping multiple validation errors
// returned by AuditAppealReq.ValidateAll() if the designated constraints
// aren't met.
type AuditAppealReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditAppealReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditAppealReqMultiError) AllErrors() []error { return m }

// AuditAppealReqValidationError is the validation error returned by
// AuditAppealReq.Validate if the designated constraints aren't met.
type AuditAppealReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditAppealReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditAppealReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditAppealReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditAppealReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditAppealReqValidationError) ErrorName() string { return "AuditAppealReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditAppealReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditAppealReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditAppealReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditAppealReqValidationError{}

// Validate checks the field values on AuditAppealRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditAppealRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditAppealRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditAppealRspMultiError,
// or nil if none found.
func (m *AuditAppealRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditAppealRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditAppealRspMultiError(errors)
	}

	return nil
}

// AuditAppealRspMultiError is an error wrapping multiple validation errors
// returned by AuditAppealRsp.ValidateAll() if the designated constraints
// aren't met.
type AuditAppealRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditAppealRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditAppealRspMultiError) AllErrors() []error { return m }

// AuditAppealRspValidationError is the validation error returned by
// AuditAppealRsp.Validate if the designated constraints aren't met.
type AuditAppealRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditAppealRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditAppealRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditAppealRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditAppealRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditAppealRspValidationError) ErrorName() string { return "AuditAppealRspValidationError" }

// Error satisfies the builtin error interface
func (e AuditAppealRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditAppealRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditAppealRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditAppealRspValidationError{}

// Validate checks the field values on ListReviewByUserIDReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReviewByUserIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReviewByUserIDReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReviewByUserIDReqMultiError, or nil if none found.
func (m *ListReviewByUserIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReviewByUserIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := ListReviewByUserIDReqValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListReviewByUserIDReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() <= 0 {
		err := ListReviewByUserIDReqValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListReviewByUserIDReqMultiError(errors)
	}

	return nil
}

// ListReviewByUserIDReqMultiError is an error wrapping multiple validation
// errors returned by ListReviewByUserIDReq.ValidateAll() if the designated
// constraints aren't met.
type ListReviewByUserIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReviewByUserIDReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReviewByUserIDReqMultiError) AllErrors() []error { return m }

// ListReviewByUserIDReqValidationError is the validation error returned by
// ListReviewByUserIDReq.Validate if the designated constraints aren't met.
type ListReviewByUserIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReviewByUserIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReviewByUserIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReviewByUserIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReviewByUserIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReviewByUserIDReqValidationError) ErrorName() string {
	return "ListReviewByUserIDReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListReviewByUserIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReviewByUserIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReviewByUserIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReviewByUserIDReqValidationError{}

// Validate checks the field values on ListReviewByUserIDRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReviewByUserIDRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReviewByUserIDRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReviewByUserIDRspMultiError, or nil if none found.
func (m *ListReviewByUserIDRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReviewByUserIDRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReviewByUserIDRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReviewByUserIDRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReviewByUserIDRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReviewByUserIDRspMultiError(errors)
	}

	return nil
}

// ListReviewByUserIDRspMultiError is an error wrapping multiple validation
// errors returned by ListReviewByUserIDRsp.ValidateAll() if the designated
// constraints aren't met.
type ListReviewByUserIDRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReviewByUserIDRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReviewByUserIDRspMultiError) AllErrors() []error { return m }

// ListReviewByUserIDRspValidationError is the validation error returned by
// ListReviewByUserIDRsp.Validate if the designated constraints aren't met.
type ListReviewByUserIDRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReviewByUserIDRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReviewByUserIDRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReviewByUserIDRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReviewByUserIDRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReviewByUserIDRspValidationError) ErrorName() string {
	return "ListReviewByUserIDRspValidationError"
}

// Error satisfies the builtin error interface
func (e ListReviewByUserIDRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReviewByUserIDRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReviewByUserIDRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReviewByUserIDRspValidationError{}
