// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: review/v1/review.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Review_CreateReview_FullMethodName        = "/api.review.v1.Review/CreateReview"
	Review_GetReview_FullMethodName           = "/api.review.v1.Review/GetReview"
	Review_ListReviewByUserID_FullMethodName  = "/api.review.v1.Review/ListReviewByUserID"
	Review_ListReviewByStoreID_FullMethodName = "/api.review.v1.Review/ListReviewByStoreID"
	Review_ReplyReview_FullMethodName         = "/api.review.v1.Review/ReplyReview"
	Review_AppealReview_FullMethodName        = "/api.review.v1.Review/AppealReview"
	Review_AuditReview_FullMethodName         = "/api.review.v1.Review/AuditReview"
	Review_AuditAppeal_FullMethodName         = "/api.review.v1.Review/AuditAppeal"
)

// ReviewClient is the client API for Review service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 评价服务
type ReviewClient interface {
	// 创建评价接口
	CreateReview(ctx context.Context, in *CreateReviewReq, opts ...grpc.CallOption) (*CreateReviewRsp, error)
	// C端获取评价详情
	GetReview(ctx context.Context, in *GetReviewReq, opts ...grpc.CallOption) (*GetReviewRsp, error)
	// C端查看userID下所有评价
	ListReviewByUserID(ctx context.Context, in *ListReviewByUserIDReq, opts ...grpc.CallOption) (*ListReviewByUserIDRsp, error)
	// C端根据店铺Id分页查询评价
	ListReviewByStoreID(ctx context.Context, in *ListReviewByStoreIDReq, opts ...grpc.CallOption) (*ListReviewByStoreIDRsp, error)
	// B端回复评价接口
	ReplyReview(ctx context.Context, in *ReplyReviewReq, opts ...grpc.CallOption) (*ReplyReviewRsp, error)
	// B端申诉评价
	AppealReview(ctx context.Context, in *AppealReviewReq, opts ...grpc.CallOption) (*AppealReviewRsp, error)
	// O端审核评价
	AuditReview(ctx context.Context, in *AuditReviewReq, opts ...grpc.CallOption) (*AuditReviewRsp, error)
	// O端评价申诉审核
	AuditAppeal(ctx context.Context, in *AuditAppealReq, opts ...grpc.CallOption) (*AuditAppealRsp, error)
}

type reviewClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewClient(cc grpc.ClientConnInterface) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) CreateReview(ctx context.Context, in *CreateReviewReq, opts ...grpc.CallOption) (*CreateReviewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReviewRsp)
	err := c.cc.Invoke(ctx, Review_CreateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) GetReview(ctx context.Context, in *GetReviewReq, opts ...grpc.CallOption) (*GetReviewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReviewRsp)
	err := c.cc.Invoke(ctx, Review_GetReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ListReviewByUserID(ctx context.Context, in *ListReviewByUserIDReq, opts ...grpc.CallOption) (*ListReviewByUserIDRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReviewByUserIDRsp)
	err := c.cc.Invoke(ctx, Review_ListReviewByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ListReviewByStoreID(ctx context.Context, in *ListReviewByStoreIDReq, opts ...grpc.CallOption) (*ListReviewByStoreIDRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReviewByStoreIDRsp)
	err := c.cc.Invoke(ctx, Review_ListReviewByStoreID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ReplyReview(ctx context.Context, in *ReplyReviewReq, opts ...grpc.CallOption) (*ReplyReviewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyReviewRsp)
	err := c.cc.Invoke(ctx, Review_ReplyReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) AppealReview(ctx context.Context, in *AppealReviewReq, opts ...grpc.CallOption) (*AppealReviewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppealReviewRsp)
	err := c.cc.Invoke(ctx, Review_AppealReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) AuditReview(ctx context.Context, in *AuditReviewReq, opts ...grpc.CallOption) (*AuditReviewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditReviewRsp)
	err := c.cc.Invoke(ctx, Review_AuditReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) AuditAppeal(ctx context.Context, in *AuditAppealReq, opts ...grpc.CallOption) (*AuditAppealRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditAppealRsp)
	err := c.cc.Invoke(ctx, Review_AuditAppeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServer is the server API for Review service.
// All implementations must embed UnimplementedReviewServer
// for forward compatibility.
//
// 评价服务
type ReviewServer interface {
	// 创建评价接口
	CreateReview(context.Context, *CreateReviewReq) (*CreateReviewRsp, error)
	// C端获取评价详情
	GetReview(context.Context, *GetReviewReq) (*GetReviewRsp, error)
	// C端查看userID下所有评价
	ListReviewByUserID(context.Context, *ListReviewByUserIDReq) (*ListReviewByUserIDRsp, error)
	// C端根据店铺Id分页查询评价
	ListReviewByStoreID(context.Context, *ListReviewByStoreIDReq) (*ListReviewByStoreIDRsp, error)
	// B端回复评价接口
	ReplyReview(context.Context, *ReplyReviewReq) (*ReplyReviewRsp, error)
	// B端申诉评价
	AppealReview(context.Context, *AppealReviewReq) (*AppealReviewRsp, error)
	// O端审核评价
	AuditReview(context.Context, *AuditReviewReq) (*AuditReviewRsp, error)
	// O端评价申诉审核
	AuditAppeal(context.Context, *AuditAppealReq) (*AuditAppealRsp, error)
	mustEmbedUnimplementedReviewServer()
}

// UnimplementedReviewServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReviewServer struct{}

func (UnimplementedReviewServer) CreateReview(context.Context, *CreateReviewReq) (*CreateReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewServer) GetReview(context.Context, *GetReviewReq) (*GetReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedReviewServer) ListReviewByUserID(context.Context, *ListReviewByUserIDReq) (*ListReviewByUserIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviewByUserID not implemented")
}
func (UnimplementedReviewServer) ListReviewByStoreID(context.Context, *ListReviewByStoreIDReq) (*ListReviewByStoreIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviewByStoreID not implemented")
}
func (UnimplementedReviewServer) ReplyReview(context.Context, *ReplyReviewReq) (*ReplyReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyReview not implemented")
}
func (UnimplementedReviewServer) AppealReview(context.Context, *AppealReviewReq) (*AppealReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppealReview not implemented")
}
func (UnimplementedReviewServer) AuditReview(context.Context, *AuditReviewReq) (*AuditReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditReview not implemented")
}
func (UnimplementedReviewServer) AuditAppeal(context.Context, *AuditAppealReq) (*AuditAppealRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditAppeal not implemented")
}
func (UnimplementedReviewServer) mustEmbedUnimplementedReviewServer() {}
func (UnimplementedReviewServer) testEmbeddedByValue()                {}

// UnsafeReviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServer will
// result in compilation errors.
type UnsafeReviewServer interface {
	mustEmbedUnimplementedReviewServer()
}

func RegisterReviewServer(s grpc.ServiceRegistrar, srv ReviewServer) {
	// If the following call pancis, it indicates UnimplementedReviewServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Review_ServiceDesc, srv)
}

func _Review_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).CreateReview(ctx, req.(*CreateReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_GetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).GetReview(ctx, req.(*GetReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ListReviewByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewByUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ListReviewByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_ListReviewByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ListReviewByUserID(ctx, req.(*ListReviewByUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ListReviewByStoreID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewByStoreIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ListReviewByStoreID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_ListReviewByStoreID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ListReviewByStoreID(ctx, req.(*ListReviewByStoreIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ReplyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReplyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_ReplyReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReplyReview(ctx, req.(*ReplyReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_AppealReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppealReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).AppealReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_AppealReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).AppealReview(ctx, req.(*AppealReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_AuditReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).AuditReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_AuditReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).AuditReview(ctx, req.(*AuditReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_AuditAppeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditAppealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).AuditAppeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_AuditAppeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).AuditAppeal(ctx, req.(*AuditAppealReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Review_ServiceDesc is the grpc.ServiceDesc for Review service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Review_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.review.v1.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReview",
			Handler:    _Review_CreateReview_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _Review_GetReview_Handler,
		},
		{
			MethodName: "ListReviewByUserID",
			Handler:    _Review_ListReviewByUserID_Handler,
		},
		{
			MethodName: "ListReviewByStoreID",
			Handler:    _Review_ListReviewByStoreID_Handler,
		},
		{
			MethodName: "ReplyReview",
			Handler:    _Review_ReplyReview_Handler,
		},
		{
			MethodName: "AppealReview",
			Handler:    _Review_AppealReview_Handler,
		},
		{
			MethodName: "AuditReview",
			Handler:    _Review_AuditReview_Handler,
		},
		{
			MethodName: "AuditAppeal",
			Handler:    _Review_AuditAppeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review/v1/review.proto",
}
