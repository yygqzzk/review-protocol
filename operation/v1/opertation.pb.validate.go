// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/operation/v1/opertation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuditReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditReviewReqMultiError,
// or nil if none found.
func (m *AuditReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReviewID() <= 0 {
		err := AuditReviewReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() <= 0 {
		err := AuditReviewReqValidationError{
			field:  "Status",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpUser()) < 2 {
		err := AuditReviewReqValidationError{
			field:  "OpUser",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpReason()) < 2 {
		err := AuditReviewReqValidationError{
			field:  "OpReason",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OpRemarks != nil {
		// no validation rules for OpRemarks
	}

	if len(errors) > 0 {
		return AuditReviewReqMultiError(errors)
	}

	return nil
}

// AuditReviewReqMultiError is an error wrapping multiple validation errors
// returned by AuditReviewReq.ValidateAll() if the designated constraints
// aren't met.
type AuditReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditReviewReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditReviewReqMultiError) AllErrors() []error { return m }

// AuditReviewReqValidationError is the validation error returned by
// AuditReviewReq.Validate if the designated constraints aren't met.
type AuditReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditReviewReqValidationError) ErrorName() string { return "AuditReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditReviewReqValidationError{}

// Validate checks the field values on AuditReviewRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditReviewRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditReviewRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditReviewRspMultiError,
// or nil if none found.
func (m *AuditReviewRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditReviewRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditReviewRspMultiError(errors)
	}

	return nil
}

// AuditReviewRspMultiError is an error wrapping multiple validation errors
// returned by AuditReviewRsp.ValidateAll() if the designated constraints
// aren't met.
type AuditReviewRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditReviewRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditReviewRspMultiError) AllErrors() []error { return m }

// AuditReviewRspValidationError is the validation error returned by
// AuditReviewRsp.Validate if the designated constraints aren't met.
type AuditReviewRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditReviewRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditReviewRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditReviewRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditReviewRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditReviewRspValidationError) ErrorName() string { return "AuditReviewRspValidationError" }

// Error satisfies the builtin error interface
func (e AuditReviewRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditReviewRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditReviewRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditReviewRspValidationError{}

// Validate checks the field values on AuditAppealReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditAppealReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditAppealReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditAppealReqMultiError,
// or nil if none found.
func (m *AuditAppealReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditAppealReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppealID() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "AppealID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReviewID() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "ReviewID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() <= 0 {
		err := AuditAppealReqValidationError{
			field:  "Status",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpUser()) < 2 {
		err := AuditAppealReqValidationError{
			field:  "OpUser",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpReason()) < 2 {
		err := AuditAppealReqValidationError{
			field:  "OpReason",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OpRemarks != nil {
		// no validation rules for OpRemarks
	}

	if len(errors) > 0 {
		return AuditAppealReqMultiError(errors)
	}

	return nil
}

// AuditAppealReqMultiError is an error wrapping multiple validation errors
// returned by AuditAppealReq.ValidateAll() if the designated constraints
// aren't met.
type AuditAppealReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditAppealReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditAppealReqMultiError) AllErrors() []error { return m }

// AuditAppealReqValidationError is the validation error returned by
// AuditAppealReq.Validate if the designated constraints aren't met.
type AuditAppealReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditAppealReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditAppealReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditAppealReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditAppealReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditAppealReqValidationError) ErrorName() string { return "AuditAppealReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditAppealReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditAppealReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditAppealReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditAppealReqValidationError{}

// Validate checks the field values on AuditAppealRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditAppealRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditAppealRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditAppealRspMultiError,
// or nil if none found.
func (m *AuditAppealRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditAppealRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditAppealRspMultiError(errors)
	}

	return nil
}

// AuditAppealRspMultiError is an error wrapping multiple validation errors
// returned by AuditAppealRsp.ValidateAll() if the designated constraints
// aren't met.
type AuditAppealRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditAppealRspMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditAppealRspMultiError) AllErrors() []error { return m }

// AuditAppealRspValidationError is the validation error returned by
// AuditAppealRsp.Validate if the designated constraints aren't met.
type AuditAppealRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditAppealRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditAppealRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditAppealRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditAppealRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditAppealRspValidationError) ErrorName() string { return "AuditAppealRspValidationError" }

// Error satisfies the builtin error interface
func (e AuditAppealRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditAppealRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditAppealRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditAppealRspValidationError{}
